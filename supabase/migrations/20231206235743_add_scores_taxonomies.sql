drop trigger if exists "handle_updated_at" on "public"."categorizations";

alter table "public"."artifacts_tags" drop constraint "artifacts_tags_artifact_id_fkey";

alter table "public"."artifacts_tags" drop constraint "artifacts_tags_tag_id_fkey";

alter table "public"."artifacts_tags" drop constraint "artifacts_tags_pkey";

alter table "public"."categorizations" drop constraint "tags_pkey";

drop index if exists "public"."artifacts_tags_pkey";

drop index if exists "public"."tags_pkey";

drop table "public"."artifacts_tags";

drop table "public"."categorizations";

create table "public"."artifacts_taxonomies" (
    "artifact_id" uuid not null,
    "taxonomy_id" uuid not null
);


alter table "public"."artifacts_taxonomies" enable row level security;

create table "public"."scores" (
    "id" bigint generated by default as identity not null,
    "artifact_id" uuid,
    "num_x_replies" numeric,
    "num_x_likes" numeric,
    "num_x_bookmarks" numeric,
    "num_x_views" numeric,
    "num_x_reposts" numeric,
    "num_hn_upvoes" numeric,
    "num_hn_replies" numeric,
    "num_discord_reactions" numeric,
    "num_discord_chats" numeric,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone,
    "deleted_at" timestamp with time zone
);


alter table "public"."scores" enable row level security;

create table "public"."taxonomies" (
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "description" text,
    "updated_at" timestamp with time zone,
    "id" uuid not null default gen_random_uuid(),
    "deleted_at" timestamp with time zone,
    "type" text not null,
    "generated_by" text
);


alter table "public"."taxonomies" enable row level security;

CREATE UNIQUE INDEX scores_pkey ON public.scores USING btree (id);

CREATE UNIQUE INDEX artifacts_tags_pkey ON public.artifacts_taxonomies USING btree (artifact_id, taxonomy_id);

CREATE UNIQUE INDEX tags_pkey ON public.taxonomies USING btree (id);

alter table "public"."artifacts_taxonomies" add constraint "artifacts_tags_pkey" PRIMARY KEY using index "artifacts_tags_pkey";

alter table "public"."scores" add constraint "scores_pkey" PRIMARY KEY using index "scores_pkey";

alter table "public"."taxonomies" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."artifacts_taxonomies" add constraint "artifacts_taxonomies_artifact_id_fkey" FOREIGN KEY (artifact_id) REFERENCES artifacts(id) ON DELETE CASCADE not valid;

alter table "public"."artifacts_taxonomies" validate constraint "artifacts_taxonomies_artifact_id_fkey";

alter table "public"."artifacts_taxonomies" add constraint "artifacts_taxonomies_taxonomy_id_fkey" FOREIGN KEY (taxonomy_id) REFERENCES taxonomies(id) ON DELETE CASCADE not valid;

alter table "public"."artifacts_taxonomies" validate constraint "artifacts_taxonomies_taxonomy_id_fkey";

alter table "public"."scores" add constraint "scores_artifact_id_fkey" FOREIGN KEY (artifact_id) REFERENCES artifacts(id) ON DELETE CASCADE not valid;

alter table "public"."scores" validate constraint "scores_artifact_id_fkey";

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.taxonomies FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.scores FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.artifacts FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.artifacts_taxonomies FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.sources FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.submissions FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');